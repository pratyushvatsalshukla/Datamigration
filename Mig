import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.*;
import java.util.Properties;

public class SnowflakeToPostgresMigrator {
    public static void main(String[] args) {
        try (InputStream input = new FileInputStream("resources/config.properties")) {
            Properties config = new Properties();
            config.load(input);

            // Snowflake properties
            Properties sfProps = new Properties();
            sfProps.put("user", config.getProperty("sf.user"));
            sfProps.put("authenticator", config.getProperty("sf.authenticator"));
            sfProps.put("db", config.getProperty("sf.db"));
            sfProps.put("schema", config.getProperty("sf.schema"));
            sfProps.put("warehouse", config.getProperty("sf.warehouse"));
            sfProps.put("role", config.getProperty("sf.role"));
            sfProps.put("client_session_keep_alive", "true"); // Optional
            String sfUrl = config.getProperty("sf.url");
            String sfView = config.getProperty("sf.view");

            // PostgreSQL
            String pgUrl = config.getProperty("pg.url");
            String pgUser = config.getProperty("pg.user");
            String pgPassword = config.getProperty("pg.password");
            String pgTable = config.getProperty("pg.table");

            // Load drivers
            Class.forName("net.snowflake.client.jdbc.SnowflakeDriver");
            Class.forName("org.postgresql.Driver");

            try (
                Connection sfConn = DriverManager.getConnection(sfUrl, sfProps);
                Connection pgConn = DriverManager.getConnection(pgUrl, pgUser, pgPassword);
                Statement sfStmt = sfConn.createStatement();
                ResultSet rs = sfStmt.executeQuery("SELECT * FROM " + sfView)
            ) {
                ResultSetMetaData meta = rs.getMetaData();
                int colCount = meta.getColumnCount();

                // Create table in PostgreSQL
                StringBuilder createSQL = new StringBuilder("CREATE TABLE IF NOT EXISTS ");
                createSQL.append(pgTable).append(" (");

                for (int i = 1; i <= colCount; i++) {
                    String colName = meta.getColumnName(i);
                    String pgType = mapSnowflakeToPostgresType(meta.getColumnTypeName(i));
                    createSQL.append(colName).append(" ").append(pgType);
                    if (i < colCount) createSQL.append(", ");
                }
                createSQL.append(");");

                Statement pgStmt = pgConn.createStatement();
                pgStmt.executeUpdate(createSQL.toString());

                // Insert data
                StringBuilder insertSQL = new StringBuilder("INSERT INTO ").append(pgTable).append(" VALUES (");
                for (int i = 0; i < colCount; i++) {
                    insertSQL.append("?");
                    if (i < colCount - 1) insertSQL.append(", ");
                }
                insertSQL.append(");");

                PreparedStatement insertStmt = pgConn.prepareStatement(insertSQL.toString());
                while (rs.next()) {
                    for (int i = 1; i <= colCount; i++) {
                        insertStmt.setObject(i, rs.getObject(i));
                    }
                    insertStmt.executeUpdate();
                }

                System.out.println("Data migrated from Snowflake view [" + sfView + "] to PostgreSQL table [" + pgTable + "]");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String mapSnowflakeToPostgresType(String sfType) {
        switch (sfType.toUpperCase()) {
            case "NUMBER": return "NUMERIC";
            case "FLOAT": case "DOUBLE": case "FLOAT4": case "FLOAT8": return "DOUBLE PRECISION";
            case "VARCHAR": case "TEXT": case "STRING": return "TEXT";
            case "BOOLEAN": return "BOOLEAN";
            case "DATE": return "DATE";
            case "TIME": return "TIME";
            case "TIMESTAMP": case "TIMESTAMP_LTZ": case "TIMESTAMP_NTZ": case "TIMESTAMP_TZ": return "TIMESTAMP";
            case "BINARY": return "BYTEA";
            default: return "TEXT";
        }
    }
}

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.*;

public class SheetMerger {
    public static void main(String[] args) throws IOException {
        String sheet1Path = "Sheet1.xlsx";
        String sheet2Path = "Sheet2.xlsx";
        String outputPath = "MergedOutput.xlsx";

        Workbook wb1 = new XSSFWorkbook(new FileInputStream(sheet1Path));
        Workbook wb2 = new XSSFWorkbook(new FileInputStream(sheet2Path));
        Workbook outputWb = new XSSFWorkbook();

        Sheet sheet1 = wb1.getSheetAt(0);
        Sheet sheet2 = wb2.getSheetAt(0);
        Sheet outputSheet = outputWb.createSheet("Merged");

        int outputRowNum = 0;

        // First, find how many columns each sheet has
        int sheet1Cols = sheet1.getRow(0).getLastCellNum();
        int sheet2Cols = sheet2.getRow(0).getLastCellNum();

        // Loop over every row in Sheet2
        for (Row row2 : sheet2) {
            if (row2.getRowNum() == 0) continue; // skip headers if needed

            String identifier = getCellString(row2.getCell(0)).toLowerCase().trim(); // Column A
            String emailFrag = getCellString(row2.getCell(4)).toLowerCase().trim();  // Column E

            Row matchedRow1 = null;

            // Search Sheet1 for a match
            for (Row row1 : sheet1) {
                if (row1.getRowNum() == 0) continue; // skip headers

                String colB = getCellString(row1.getCell(1)).toLowerCase(); // Column B
                String colC = getCellString(row1.getCell(2)).toLowerCase(); // Column C

                boolean match =
                        identifier.equals(colB) ||
                        colC.contains(identifier) ||
                        colC.contains(emailFrag);

                if (match) {
                    matchedRow1 = row1;
                    break;
                }
            }

            // Write to output
            Row outputRow = outputSheet.createRow(outputRowNum++);
            int colNum = 0;

            // If matched, write Sheet1 row + Sheet2 row
            if (matchedRow1 != null) {
                for (Cell cell : matchedRow1) {
                    outputRow.createCell(colNum++).setCellValue(getCellString(cell));
                }
            } else {
                // Write NULLs for Sheet1 columns
                for (int i = 0; i < sheet1Cols; i++) {
                    outputRow.createCell(colNum++).setCellValue("NULL");
                }
            }

            // Write Sheet2 row
            for (Cell cell : row2) {
                outputRow.createCell(colNum++).setCellValue(getCellString(cell));
            }
        }

        // Save output
        FileOutputStream fos = new FileOutputStream(outputPath);
        outputWb.write(fos);
        fos.close();

        wb1.close();
        wb2.close();
        outputWb.close();

        System.out.println("Merged output written to " + outputPath);
    }

    private static String getCellString(Cell cell) {
        if (cell == null) return "";
        return switch (cell.getCellType()) {
            case STRING -> cell.getStringCellValue();
            case NUMERIC -> String.valueOf(cell.getNumericCellValue());
            case BOOLEAN -> String.valueOf(cell.getBooleanCellValue());
            case FORMULA -> cell.getCellFormula();
            default -> cell.toString();
        };
    }
}





import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;

public class FinalSheetMerger {
    public static void main(String[] args) throws IOException {
        String sheet1Path = "Sheet1.xlsx";
        String sheet2Path = "Sheet2.xlsx";
        String outputPath = "MergedOutput.xlsx";

        Workbook wb1 = new XSSFWorkbook(new FileInputStream(sheet1Path));
        Workbook wb2 = new XSSFWorkbook(new FileInputStream(sheet2Path));
        Workbook outputWb = new XSSFWorkbook();

        Sheet sheet1 = wb1.getSheetAt(0);
        Sheet sheet2 = wb2.getSheetAt(0);
        Sheet outputSheet = outputWb.createSheet("Merged");

        int sheet1Cols = sheet1.getRow(0).getLastCellNum(); // Count of columns in Sheet1
        int outputRowNum = 0;

        for (Row row2 : sheet2) {
            String id2 = getCell(row2.getCell(0)).toLowerCase().trim();  // Sheet2 Column A
            String emailFrag2 = getCell(row2.getCell(4)).toLowerCase().trim();  // Sheet2 Column E

            Row matchedRow1 = null;

            for (Row row1 : sheet1) {
                String colB = getCell(row1.getCell(1)).toLowerCase(); // Sheet1 Column B
                String colC = getCell(row1.getCell(2)).toLowerCase(); // Sheet1 Column C

                if (id2.equals(colB) || colC.contains(id2) || colC.contains(emailFrag2)) {
                    matchedRow1 = row1;
                    break;
                }
            }

            Row outputRow = outputSheet.createRow(outputRowNum++);
            int colNum = 0;

            if (matchedRow1 != null) {
                for (Cell cell : matchedRow1) {
                    outputRow.createCell(colNum++).setCellValue(getCell(cell));
                }
            } else {
                for (int i = 0; i < sheet1Cols; i++) {
                    outputRow.createCell(colNum++).setCellValue("NULL");
                }
            }

            for (Cell cell : row2) {
                outputRow.createCell(colNum++).setCellValue(getCell(cell));
            }
        }

        FileOutputStream fos = new FileOutputStream(outputPath);
        outputWb.write(fos);
        fos.close();

        wb1.close();
        wb2.close();
        outputWb.close();

        System.out.println("Merged file saved as: " + outputPath);
    }

    private static String getCell(Cell cell) {
        return (cell == null) ? "" : cell.toString();
    }
}








import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.*;

public class OptimizedMerger {
    public static void main(String[] args) throws Exception {
        String wfmiFile = "WFMI.xlsx";
        String sheet2File = "Sheet2.xlsx";
        String outputFile = "MergedOutput.xlsx";

        Workbook wfmiWb = new XSSFWorkbook(new FileInputStream(wfmiFile));
        Workbook sheet2Wb = new XSSFWorkbook(new FileInputStream(sheet2File));
        Workbook outputWb = new XSSFWorkbook();

        Sheet wfmiSheet = wfmiWb.getSheetAt(0);
        Sheet sheet2 = sheet2Wb.getSheetAt(0);
        Sheet output = outputWb.createSheet("Merged");

        int outputRowNum = 0;
        int wfmiCols = wfmiSheet.getRow(0).getLastCellNum();

        // Preload WFMI data into maps
        Map<String, Row> racfMap = new HashMap<>();
        Map<String, List<Row>> emailMap = new HashMap<>();

        for (Row row : wfmiSheet) {
            String racf = getCellValue(row.getCell(61)).toLowerCase().trim(); // Column BJ
            String email = getCellValue(row.getCell(20)).toLowerCase().trim(); // Column U

            if (!racf.isEmpty()) {
                racfMap.put(racf, row);
            }

            if (!email.isEmpty()) {
                emailMap.computeIfAbsent(email, k -> new ArrayList<>()).add(row);
            }
        }

        // Process each row in Sheet2
        for (Row row2 : sheet2) {
            String identifier = getCellValue(row2.getCell(0)).toLowerCase().trim(); // Column A
            String emailFrag = getCellValue(row2.getCell(4)).toLowerCase().trim(); // Column E

            Row matchedRow = null;

            // 1. Try RACF exact match
            if (racfMap.containsKey(identifier)) {
                matchedRow = racfMap.get(identifier);
            } else {
                // 2. Try contains in emailMap keys (email work contains identifier or emailFrag)
                for (String emailKey : emailMap.keySet()) {
                    if (emailKey.contains(identifier) || emailKey.contains(emailFrag)) {
                        matchedRow = emailMap.get(emailKey).get(0);
                        break;
                    }
                }
            }

            // Write merged output
            Row outputRow = output.createRow(outputRowNum++);
            int colNum = 0;

            if (matchedRow != null) {
                for (Cell cell : matchedRow) {
                    outputRow.createCell(colNum++).setCellValue(getCellValue(cell));
                }
            } else {
                for (int i = 0; i < wfmiCols; i++) {
                    outputRow.createCell(colNum++).setCellValue("NULL");
                }
            }

            for (Cell cell : row2) {
                outputRow.createCell(colNum++).setCellValue(getCellValue(cell));
            }
        }

        FileOutputStream fos = new FileOutputStream(outputFile);
        outputWb.write(fos);
        fos.close();

        wfmiWb.close();
        sheet2Wb.close();
        outputWb.close();

        System.out.println("Merged output saved as: " + outputFile);
    }

    private static String getCellValue(Cell cell) {
        return cell == null ? "" : cell.toString();
    }
}

